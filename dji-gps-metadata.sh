#!/bin/bash
#
# ARG_OPTIONAL_SINGLE([make],[m],[Device make],[DJI])
# ARG_OPTIONAL_SINGLE([model],[d],[Device model],[Mini 2])
# ARG_POSITIONAL_SINGLE([filename],[source video file name],[])
# ARG_HELP([DJI GPS Metadata for Photos.app])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='mdh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_make="DJI"
_arg_model="Mini 2"


print_help()
{
  printf '%s\n' "DJI GPS Metadata for Photos.app"
  printf 'Usage: %s [-m|--make <arg>] [-d|--model <arg>] [-h|--help] <filename>\n' "$0"
  printf '\t%s\n' "<filename>: source video file name"
  printf '\t%s\n' "-m, --make: Device make (default: 'DJI')"
  printf '\t%s\n' "-d, --model: Device model (default: 'Mini 2')"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -m|--make)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_make="$2"
        shift
        ;;
      --make=*)
        _arg_make="${_key##--make=}"
        ;;
      -m*)
        _arg_make="${_key##-m}"
        ;;
      -d|--model)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_model="$2"
        shift
        ;;
      --model=*)
        _arg_model="${_key##--model=}"
        ;;
      -d*)
        _arg_model="${_key##-d}"
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  local _required_args_string="'filename'"
  test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_filename "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


filename=$_arg_filename
make=$_arg_make
model=$_arg_model

coordinates=$(exiftool -ignoreMinorErrors -c %+.10f -p '${gpslatitude;s/([-+])/$1.("0"x(14-length $_))/e}${gpslongitude;s/([-+])/$1.("0"x(15-length $_))/e}' -s -s -s "$filename" | tr -d '\n')
creationDate=$(exiftool -CreateDate -d '%Y-%m-%dT%H:%M:%SZ' -s -s -s "$filename")

string=$(cat << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>mdta/com.apple.quicktime.location.ISO6709</key>
  <string>${coordinates}/</string>
  <key>common/location</key>
  <string>${coordinates}/</string>
  <key>common/creationDate</key>
  <string>${creationDate}</string>
  <key>common/make</key>
  <string>${make}</string>
  <key>common/model</key>
  <string>${model}</string>
</dict>
</plist>
EOF
)

plistfile=$(mktemp -t location.plist.XXXXXX)
echo "$plistfile"
echo "$string" > "$plistfile"

basename="${filename%%.*}"
dstfile="._$basename.mov"
echo "$dstfile"

avmetareadwrite --append-metadata="$plistfile" "$filename" "$dstfile"

rm -f "$filename"

mv "$dstfile" "$basename.mov"

# Clean up the plist file
rm -f "$plistfile"

# ] <-- needed because of Argbash
